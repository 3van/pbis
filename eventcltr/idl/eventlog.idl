/*
 * Copyright (C) Centeris Corporation 2004-2007
 * Copyright (C) Likewise Software 2007
 * All rights reserved.
 *
 * Authors: Krishna Ganugapati (krishnag@likewisesoftware.com)
 *          Sriram Nambakam (snambakam@likewisesoftware.com)
 *
 * LWCollector IDL
 *
 */
#ifndef __LWCOLLECTOR_IDL__
#define __LWCOLLECTOR_IDL__

#ifdef _WIN32
import "wtypes.idl";
#endif

[
    uuid(9956a31b-ec79-4818-9c63-c112689ae826),
    pointer_default(unique), 
    version(1.0)
]


interface LWCollector { 

    cpp_quote("#ifndef __LWCOLLECTOR_IDL__")
    cpp_quote("#define __LWCOLLECTOR_IDL__")

#ifndef _DCE_IDL_

    cpp_quote("#ifdef _WIN32")

    cpp_quote("#ifndef TARGET_IS_NT50_OR_LATER")
    cpp_quote("#define TARGET_IS_NT50_OR_LATER TRUE")
    cpp_quote("#else")
    cpp_quote("#if !(TARGET_IS_NT50_OR_LATER)")
    cpp_quote("#undef TARGET_IS_NT50_OR_LATER")
    cpp_quote("#define TARGET_IS_NT50_OR_LATER TRUE")
    cpp_quote("#endif // false TARGET_IS_NT50_OR_LATER")
    cpp_quote("#endif // undefined TARGET_IS_NT50_OR_LATER")

    cpp_quote("#endif //_WIN32, !_WIN32")

    typedef [string] WCHAR* PWSTR;

#else //_DCE_IDL_

    //cpp_quote("#include <cltr-base.h>")
    cpp_quote("#if 0")
    #include <lw/types.h>
    cpp_quote("#else")
    cpp_quote("#include <lw/types.h>")
    cpp_quote("#endif //_0")

#endif //_DCE_IDL_

    cpp_quote("#if 0")
    #include "cltr-record.h"
    cpp_quote("#else")
    cpp_quote("#include <cltr-record.h>")
    cpp_quote("#endif //_0")

    typedef struct _LWCOLLECTOR_RECORD_LIST
    {
	DWORD dwCount;
	[size_is(dwCount)] LWCOLLECTOR_RECORD* pRecords;
    } LWCOLLECTOR_RECORD_LIST, *PLWCOLLECTOR_RECORD_LIST;

    cpp_quote("#ifndef RPC_LWCOLLECTOR_HANDLE_DEFINED")
#ifndef RPC_LWCOLLECTOR_HANDLE_DEFINED
#define RPC_LWCOLLECTOR_HANDLE_DEFINED
    typedef [context_handle] struct _RPC_LWCOLLECTOR_CONNECTION *RPC_LWCOLLECTOR_HANDLE;
#endif
    cpp_quote("#define RPC_LWCOLLECTOR_HANDLE_DEFINED")
    cpp_quote("#endif //RPC_LWCOLLECTOR_HANDLE_DEFINED")

    DWORD
    RpcCltrOpen(
	[in] handle_t bindingHandle,
    [out] RPC_LWCOLLECTOR_HANDLE *phCollector
	);

    DWORD
    RpcCltrClose(
	[in, out] RPC_LWCOLLECTOR_HANDLE *phCollector
	);
    
    DWORD
    RpcCltrGetRecordCount(
	[in] RPC_LWCOLLECTOR_HANDLE hCollector,
	[in, string] WCHAR * sqlFilter,
	[out] DWORD * pdwNumMatched
	);

    DWORD
    RpcCltrReadRecords(
	[in] RPC_LWCOLLECTOR_HANDLE hCollector,
	[in] UINT64 qwIndex,
    [in] DWORD nRecordsPerPage,
	[in, string] WCHAR * sqlFilter,
	[out] LWCOLLECTOR_RECORD_LIST *pEventRecordList
	);

    DWORD
    RpcCltrWriteRecords(
	[in] RPC_LWCOLLECTOR_HANDLE hCollector,
	[in] DWORD cRecords,
  	[in, size_is(cRecords)] LWCOLLECTOR_RECORD* pEventRecords 
	);

    DWORD
    RpcCltrDeleteRecords(
	[in] RPC_LWCOLLECTOR_HANDLE hCollector,
	[in, string] WCHAR * sqlFilter
	);

    DWORD
    RpcCltrGetPushRate(
	[in] RPC_LWCOLLECTOR_HANDLE hCollector,
    [in] DWORD dwEventsWaiting,
    [in] double dPeriodConsumed, //Percentage of the period/100 consumed with sending records
    [out] DWORD *pdwRecordsPerPeriod,
    [out] DWORD *pdwRecordsPerBatch,
    [out] DWORD *pdwPeriodSecs
    );

	cpp_quote("#endif /* __LWCOLLECTOR_IDL__ */")
}

#endif /* __LWCOLLECTOR_IDL__ */

