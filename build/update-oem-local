#!/bin/bash

if [ -z "${BUILD_ROOT}" ]; then
    echo "You need to source buildenv first"
    exit 1
fi

function exit_on_error
{
    if [ $1 -ne 0 ]; then
        if [ -n "$2" ]; then
            echo "$2"
        fi
        exit $1
    fi
}

. ${BUILD_ROOT}/src/linux/build/common.sh
exit_on_error $?

function run_no_show
{
    if [ -z "${OPT_SHOW}" ]; then
        "$@"
    fi
}

function run_show
{
    echo "$@"
    run_no_show "$@"
}

function usage
{
    echo "usage: `basename $0` [options] <oem-name>"
    echo ""
    echo "    Creates a version of the internal build tools suitable as"
    echo "    a reference for an OEM.  This includes ..."
    echo ""
    echo "  options:"
    echo ""
    echo "    --show          - Only show steps w/o doing anything (dry run)."
    echo ""
    echo "  valid OEM names:"
    echo ""
    echo "    vmware"
    echo ""
    exit 1
}

function main
{
    OPT_SHOW=
    while [ -n "$1" ] ; do
        case "$1" in
            --help)
                usage
                ;;
            --show)
                if [ -n "${OPT_SHOW}" ]; then
                    echo "Can specify option $1 only once."
                    usage
                fi
                OPT_SHOW=1
                ;;
            -*)
                echo "Invalid option: $1"
                usage
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    OEM="$1"
    shift

    if [ -z "${OEM}" ]; then
        echo "Missing OEM name argument."
        usage
    fi

    if [ -n "$1" ]; then
        echo "Too many arugments."
        usage
    fi

    #
    # Initialize
    #

    BASE_FILESET="common.sh mkcomp mkinstall mknuke mktest version.sh"

    PROFILE=""
    PRODUCTS=""
    ADD_FILESET=""

    #
    # CUSTOMIZE BELOW HERE
    #

    case "${OEM}" in
        vmware)
            PROFILE="esxi"
            PRODUCTS="lwesxi"
            ADD_FILESET="mkesxi"
            ;;
        *)
            echo "Unsupported OEM name '${OEM}'"
            exit 1
            ;;
    esac

    #
    # CUSTOMIZE ABOVE HERE
    #

    #
    # Go into directory
    #

    DIR=`dirname $0`
    if [ -z "${DIR}" ]; then
        echo "Cannot determine script directory."
        exit 1
    fi

    echo "Running from ${DIR}"

    pushd "${DIR}" > /dev/null
    exit_on_error $?
    DIR=`pwd`
    exit_on_error $?
    if [ -z "${DIR}" ]; then
        echo "Cannot determine script directory."
        exit 1
    fi

    echo "Running from ${DIR}"

    #
    # Compute components
    #

    echo "Loading profile ${PROFILE}"
    load_profile "${PROFILE}"
    exit_on_error $?

    echo "Gathering component list for ${PRODUCTS}"
    COMPONENTS=`mkproduct --show --onlycomp ${PRODUCTS} | awk '{print $2}'`
    if [ -z "${COMPONENTS}" ]; then
        echo "No components found"
        exit 1
    fi

    #
    # Set up top dirs and fileset
    #

    from_top="."
    to_top="./oem-local"

    base_fileset=`for file in ${BASE_FILESET} ; do echo ${from_top}/${file} ; done`
    add_fileset=`for file in ${ADD_FILESET} ; do echo ${from_top}/${file} ; done`
    lib_fileset=`find ${from_top}/lib -maxdepth 1 -type f`
    comp_fileset=`for comp in ${COMPONENTS} ; do echo ${from_top}/components/${comp}.comp ; done`

    fileset="${base_fileset} ${add_fileset} ${lib_fileset} ${comp_fileset}"

    #
    # Verify files are present
    #

    for file in ${fileset} ; do
        if [ ! -f "${file}" ]; then
            echo "Missing file: '${file}'"
            exit 1
        fi
    done

    #
    # Ready to run
    #

    if [ -n "${OPT_SHOW}" ]; then
        echo "[dry run started]"
    else
        echo "[running the following]"
    fi

    for file in `find ${to_top} -name .svn -prune -o -type f -a -print` ; do
        run_show rm ${file}
    done

    for file in `find ${to_top} -name .svn -prune -o -type d -a -print | sort -r` ; do
        run_show rmdir --ignore-fail-on-non-empty ${file}
    done

    for file in ${fileset} ; do
        to_dir=`dirname ${file} | sed s:^${from_top}:${to_top}:`
        run_no_show mkdir -p ${to_dir}
        run_show cp ${file} ${to_dir}/.
    done

    # TODO - Deal with SVN add/remove?

    popd > /dev/null
    exit_on_error $?

    if [ -n "${OPT_SHOW}" ]; then
        echo "[dry run complete - nothing changed]"
    else
        echo "[run complete]"
    fi
}

main "$@"
exit 0
