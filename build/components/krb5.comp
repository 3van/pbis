#!/bin/sh

#
# krb5.comp -- see ../../helper.sh for how this file works.
#

COMP_VERSION="1.7"
COMP_RELEASE="0"
COMP_NEED_COMPAT=1
COMP_DEPENDENCIES="autoconf libtool openssl"
SRC_DIR=${BUILD_ROOT}/src/linux/krb5
COMP_SOURCES=$SRC_DIR

# NOTE: IS_COMPAT build is only for headers (for error mappings in lwadvapi).

function component_bootstrap
{
    cd "${COMP_SOURCES}/src" && ./autogen.sh
    exit_on_error $?
}

function component_gather
{
    echo "Nothing to gather for krb5"
}

function _setup_build_env
{
    set_compiler_env

    cd ${BUILDING_ROOT}

    CFLAGS="${_cflags} -fPIC"
    LDFLAGS="${_ldflags} $(libtool_format_rpath ${PREFIX_DIR}/${_lib})"
    DEFINES="-DMAX_POLL_FDS=32"

    case "${BUILD_OS_TYPE}" in
	linux)
            DEFINES="-D_FILE_OFFSET_BITS=64"
	    ;;
	hpux)
	    DEFINES="-D_FILE_OFFSET_BITS=64 -D_NET_IF6_INCLUDED"
            ;;
        aix)
	    DEFINES=
	    CC="$(echo $CC | sed 's/^gcc/gcc-wrap.sh/')"
	    ;;
    esac

    CFLAGS="$CFLAGS $DEFINES"
    CPPFLAGS="$DEFINES"

    export DEFINES CFLAGS CPPFLAGS LDFLAGS
}

function component_configure
{
    _setup_build_env

    extra_flags=""
    if [ -n "${IS_COMPAT}" ]; then
        extra_flags="${extra_flags}"" --enable-includes-only"
    fi
    "${COMP_SOURCES}/src/configure" \
        CC="${CC}" \
        CFLAGS="${CFLAGS}" \
        CPPFLAGS="$(libtool_staging_cppflags) ${CPPFLAGS}" \
        LDFLAGS="$(libtool_staging_ldflags) ${LDFLAGS}" \
        --build="`get_build_string`" \
	--prefix=${PREFIX_DIR} \
	--exec-prefix=${PREFIX_DIR} \
	--libdir=${PREFIX_DIR}/${_lib} \
	--includedir=${PREFIX_DIR}/include \
        --sysconfdir=${BUILD_SYSCONFDIR} \
	--enable-shared \
	--without-krb4 \
        --without-tcl \
        ${extra_flags} \
        ${DEPENDENCY_TRACKING}
}

function component_build
{
    _setup_build_env

    if [ "${BUILD_OS_TYPE}" = 'solaris' ]; then
        ${MAKE} ${_mflags}
    else

        # Now build it.  Override the RPATH_FLAG and PROG_LIBPATH to drop the
        # rpath, and override LDCOMBINE to use gcc instead of ld to build
        # shared libraries.

	${MAKE} \
	    RPATH_FLAG= \
	    RPATH_TAIL= \
	    PROG_RPATH= \
	    LDCOMBINE='${CC} -shared -Wl,-soname=lib$(LIB)$(SHLIBSEXT) $(CFLAGS)' \
	    SHLIB_EXPFLAGS='$(CFLAGS) $(SHLIB_DIRS) $(SHLIB_EXPLIBS) $(LDFLAGS)' \
	    ${_mflags}
    fi
}

function component_stage
{
    _setup_build_env

    ${MAKE} DESTDIR=${STAGING_ROOT_DIR} install
    
    # Fixup permissions on header files.
    find ${STAGING_PREFIX_DIR}/include -type d | xargs chmod 755
    find ${STAGING_PREFIX_DIR}/include -type f | xargs chmod 644

    if [ -n "${IS_COMPAT}" ]; then
        rm -rf ${STAGING_PREFIX_DIR}/${_lib}
        rm -rf ${STAGING_PREFIX_DIR}/bin
    fi

    # Do we want to also exclude some others (libdes425, libgssrpc)?
    rm -f ${STAGING_PREFIX_DIR}/${_lib}/{libkadm5,libkdb5}*
    rm -rf ${STAGING_PREFIX_DIR}/{sbin,share,var}
    rm -f ${STAGING_PREFIX_DIR}/bin/compile_et
    rm -f ${STAGING_PREFIX_DIR}/bin/k5srvutil
    rm -f ${STAGING_PREFIX_DIR}/bin/kadmin
    rm -rf ${STAGING_PREFIX_DIR}/include/kerberosIV
    rm -rf ${STAGING_PREFIX_DIR}/${_lib}/krb5/plugins/authdata
    rm -rf ${STAGING_PREFIX_DIR}/${_lib}/krb5/plugins/kdb
    rm -rf ${STAGING_PREFIX_DIR}/${_lib}/krb5/plugins/libkrb5

    if [ -d "${STAGING_PREFIX_DIR}/${_lib}" ]; then
        # Fixup strange shared library permissions.
        chmod 755 ${STAGING_PREFIX_DIR}/${_lib}/lib*
    fi

    # Fix up libtool/dylib files
    libtool_rewrite_staging
}

# function component_strip
# {
#     # Strip binaries
#     strip_helper ${STAGING_PREFIX_DIR}/${_lib}/*.so*
# }
#!/bin/bash

function component_populate
{
    COMP_NAME=krb5
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    if [ -z "${IS_COMPAT}" ]; then
	mkdir -p ${POPULATE_PREFIX_DIR}
	rsync -a ${COMP_PREFIX_DIR}/ ${POPULATE_PREFIX_DIR}/
	mkdir -p ${POPULATE_ROOT_DIR}/etc/likewise
    else
	mkdir -p ${POPULATE_PREFIX_DIR}/${_lib}
	rsync -a ${COMP_PREFIX_DIR}/${_lib}/ ${POPULATE_PREFIX_DIR}/${_lib}/
    fi

    rm -f ${POPULATE_PREFIX_DIR}/bin/ksu

    libtool_rewrite_populate
}
