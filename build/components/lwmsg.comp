#!/bin/sh

if [ -z "${BUILD_MINIMAL}" ]
then
    extra_deps="libiconv"
fi

COMP_NEED_COMPAT=1
COMP_NEED_FOREIGN=1
COMP_DEPENDENCIES="autoconf automake libtool lwbase ${extra_deps}"
COMP_SOURCES="${BUILD_ROOT}/src/linux/lwmsg"
COMP_INCREMENTAL=1

function component_bootstrap
{
    cd "${COMP_SOURCES}" && autoreconf -fi
}

function component_gather
{
    echo "Nothing to gather for lwmsg"
}

function _setup_build_env
{
    set_compiler_env

    cd ${BUILDING_ROOT}/.
    exit_on_error $?

    CPPFLAGS="${_cppflags} $(libtool_staging_cppflags)"
    CFLAGS="${_cflags}"
    LDFLAGS="${_ldflags} $(libtool_staging_ldflags)"

    export PATH CPPFLAGS LDFLAGS CFLAGS CC
}

function component_configure
{
    _setup_build_env

    "${COMP_SOURCES}/configure"        \
	--prefix=${PREFIX_DIR}         \
        --libdir=${PREFIX_DIR}/${_lib} \
        ${DEPENDENCY_TRACKING}
}

function component_build
{
    _setup_build_env

    ${MAKE} ${_mflags} all
}

function component_stage
{
    _setup_build_env

    ${MAKE} DESTDIR=${STAGING_ROOT_DIR} install

    libtool_rewrite_staging
}

function component_populate
{
    COMP_NAME=lwmsg
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    if [ -z "${IS_COMPAT}" -a -z "${IS_FOREIGN}" ]
    then
        mkdir -p ${POPULATE_ROOT_DIR}
        rsync -a ${COMP_ROOT_DIR}/ ${POPULATE_ROOT_DIR}/
    else
        mkdir -p ${POPULATE_PREFIX_DIR}/${_lib}
        rsync -a ${COMP_PREFIX_DIR}/${_lib}/  ${POPULATE_PREFIX_DIR}/${_lib}/
    fi

    libtool_rewrite_populate
}
