#!/bin/sh

COMP_VERSION="0.9.8h"
COMP_RELEASE="1"
COMP_SOURCES="${BUILD_ROOT}/src/linux/openssl"

function component_bootstrap
{
    echo "Nothing to bootstrap for openssl"
}

function component_gather
{
    rsync -a --exclude=.svn ${COMP_SOURCES}/ ${GATHER_DIR}/
}

function _setup_build_env
{
    set_compiler_env

    cd ${BUILDING_ROOT}

    CFLAGS="${_cflags}"
    LDFLAGS="${_ldflags} $(libtool_format_rpath ${PREFIX_DIR}/${_lib})"
    if echo "$CC" | grep " -static-libgcc"; then
        LDFLAGS="${LDFLAGS} -static-libgcc"
    fi

    export CFLAGS LDFLAGS
}

function component_configure
{
    _setup_build_env

    case "${BUILD_OS_TYPE}-${BUILD_OS_ARCH}-`[ -n "${IS_COMPAT}" ] && echo yes || echo no`" in
        hpux-ia64-no)
            TARGET="hpux-ia64-gcc"
            ;;
        hpux-ia64-yes)
            TARGET="hpux64-ia64-gcc"
	    ;;
        *)
            TARGET=""
            ;;
    esac

    case "${OSTYPE}-`[ -n "${COMP_IS_COMPAT}" ] && echo yes || echo no`" in
        darwin10.*-no)
            TARGET="darwin64-x86_64-cc"
            ;;
	darwin10.*-yes)
	    TARGET="darwin-i386-cc"
	    ;;
    esac

    if [ -n "${TARGET}" ]
    then
	./Configure --prefix="${PREFIX_DIR}" shared ${TARGET}
    else 
        # Always build debug. The debug symbols will get stripped later.
        ./config -d --prefix="${PREFIX_DIR}" shared 
    fi
}

function component_build
{
    _setup_build_env
    local SHARED_LDFLAGS CUSTOM_CC

    case "${BUILD_OS_TYPE}" in
	"darwin")
            SHARED_LDFLAGS="-dynamiclib ${LDFLAGS}"
	    CC="$CC"
	    ;;
	"linux")
            SHARED_LDFLAGS="-shared ${LDFLAGS}"
	    CC="$CC -Wa,--noexecstack"
	    ;;
	*)
            SHARED_LDFLAGS="-shared ${LDFLAGS}"
	    CC="$CC"
	    ;;
    esac
    ${MAKE} SHARED_LDFLAGS="$SHARED_LDFLAGS" CC="$CC" all
}

function component_stage
{
    _setup_build_env

    ${MAKE} INSTALL_PREFIX="${STAGING_ROOT_DIR}" install_sw

    if [ -z "$IS_COMPAT" ]; then
       if [ -d ${STAGING_PREFIX_DIR}/lib ]; then
          _lib_path=`eval echo ${STAGING_PREFIX_DIR}/lib`
          _compat_lib_path=`eval echo ${STAGING_PREFIX_DIR}/${_lib}`
          if [ "$_lib_path" != "$_compat_lib_path" ]; then
              /bin/mv $_lib_path $_compat_lib_path
          fi
       fi
    fi

    libtool_rewrite_staging
}

function component_populate
{
    COMP_NAME=openssl
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    rsync -a ${COMP_ROOT_DIR}/ ${POPULATE_ROOT_DIR}/

    libtool_rewrite_populate
}
