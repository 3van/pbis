#!/bin/bash -c "exit 1"

#
# libschannel.comp -- see ../../helper.sh for how this file works.
#

COMP_INCREMENTAL=1
COMP_DEPENDENCIES="automake autoconf libtool openssl lwbase"
COMP_SOURCES=${BUILD_ROOT}/src/linux/libschannel

function component_bootstrap
{
    cd "${COMP_SOURCES}" && ./autogen.sh
    exit_on_error $?
}

function component_gather
{
    echo "Nothing to gather for ${COMP_NAME}"
}

function _setup_build_env
{
    set_compiler_env

    LDFLAGS="${_ldflags} $(libtool_format_rpath ${PREFIX_DIR}/${_lib})"
    CFLAGS="${_cflags}"
    CPPFLAGS="${_cppflags}"

    export LDFLAGS CFLAGS CPPFLAGS

    cd ${BUILDING_ROOT}
    exit_on_error $?
}

function component_configure
{
    _setup_build_env

    "${COMP_SOURCES}/configure" \
	--prefix=${PREFIX_DIR} \
	--libdir=${PREFIX_DIR}/${_lib} \
        ${DEPENDENCY_TRACKING}         \
	CPPFLAGS="$CPPFLAGS $(libtool_staging_cppflags)" \
	LDFLAGS="$LDFLAGS $ICONV_LDFLAGS $(libtool_staging_ldflags)"
}

function component_build
{
   _setup_build_env

   ${MAKE} ${_mflags} all
}

function component_stage
{
    _setup_build_env

    ${MAKE} DESTDIR=${STAGING_ROOT_DIR} install

    libtool_rewrite_staging
}


function component_populate
{
    COMP_NAME=libschannel
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    mkdir -p ${POPULATE_PREFIX_DIR}
    rsync -a ${COMP_PREFIX_DIR}/ ${POPULATE_PREFIX_DIR}/

    libtool_rewrite_populate
}
