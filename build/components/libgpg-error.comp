#!/bin/bash -c "exit 1"

#
# libgss.comp -- see ../../helper.sh for how this file works.
#

COMP_INCREMENTAL=1
COMP_DEPENDENCIES="automake autoconf libtool"
COMP_SOURCES=${BUILD_ROOT}/src/linux/libgpg-error

function component_gather
{
    rsync -a --exclude=.svn ${COMP_SOURCES}/ ${GATHER_DIR}/
}

function _setup_build_env
{
    set_compiler_env

    LDFLAGS="${_ldflags} $(libtool_staging_ldflags)"
    CFLAGS="${_cflags}"
    CPPFLAGS="${_cppflags} $(libtool_staging_cppflags)"

    export LDFLAGS CFLAGS CPPFLAGS

    cd ${BUILDING_ROOT}
    exit_on_error $?
}

function component_configure
{
    _setup_build_env

    ./autogen.sh && ./configure \
	--prefix=${PREFIX_DIR} \
	--libdir=${PREFIX_DIR}/${_lib} \
        ${DEPENDENCY_TRACKING}
}

function component_build
{
   _setup_build_env

   ${MAKE} ${_mflags} all
}

function component_stage
{
    _setup_build_env

    ${MAKE} DESTDIR=${STAGING_ROOT_DIR} install

    libtool_rewrite_staging
}


function component_populate
{
    COMP_NAME=libgpg-error
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    if [ -z "${IS_COMPAT}" ]; then
	mkdir -p ${POPULATE_PREFIX_DIR}
	rsync -a --exclude "include" ${COMP_PREFIX_DIR}/ ${POPULATE_PREFIX_DIR}/
    else
	mkdir -p ${POPULATE_PREFIX_DIR}/${_lib}
	rsync -a ${COMP_PREFIX_DIR}/${_lib}/ ${POPULATE_PREFIX_DIR}/${_lib}/
    fi

    libtool_rewrite_populate
}
