#!/bin/sh

COMP_INCREMENTAL=1
COMP_DEPENDENCIES="autoconf automake libtool krb5 libuuid netlogon lwbase pstore"
COMP_SOURCES=${BUILD_ROOT}/src/linux/lwdns

function component_bootstrap
{
    cd "${COMP_SOURCES}" && ./autogen.sh
    exit_on_error $?
}

function component_gather
{
    echo "Nothing to gather for ${COMP_NAME}"
}

function _setup_build_env
{
    set_compiler_env

    cd ${BUILDING_ROOT}
    exit_on_error $?

    # We need no-strict aliasing if we get optimized builds
    CFLAGS="${_cflags}"
    CPPFLAGS="${_cppflags}"
    LDFLAGS="${_ldflags}"

    export PATH CPPFLAGS LDFLAGS CFLAGS CC
}

function component_configure
{
    local enable_debug=""

    _setup_build_env

    if [ -n "${BUILD_DEBUG}" ]; then
       enable_debug="--enable-debug"
    fi

    "${COMP_SOURCES}/configure"                       \
	--prefix=${PREFIX_DIR}                        \
        --libdir=${PREFIX_DIR}/${_lib}                \
	--sysconfdir=${BUILD_SYSCONFDIR}              \
        --localstatedir=${BUILD_LOCALSTATEDIR}        \
        $enable_debug                                 \
        ${DEPENDENCY_TRACKING}                        \
	LDFLAGS="$(libtool_staging_ldflags) $LDFLAGS" \
        CPPFLAGS="$(libtool_staging_cppflags) $CPPFLAGS"
}

function component_build
{
    _setup_build_env

    ${MAKE} ${_mflags} all
}

function component_stage
{
    _setup_build_env

    ${MAKE} DESTDIR=${STAGING_ROOT_DIR} install

    libtool_rewrite_staging
}

function component_populate
{
    COMP_NAME=lwdns
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    mkdir -p ${POPULATE_ROOT_DIR}
    rsync -a ${COMP_ROOT_DIR}/ ${POPULATE_ROOT_DIR}/

    
}
