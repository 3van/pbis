#!/bin/bash -c "exit 1"

#
# skeleton.comp -- skeleton component file
#

# Variables section
#
# Defines variables that describe attributes of this
# component

# Define if this component should have compatibility libraries built
#COMP_NEED_COMPAT=1


# Functions section
#
# Contains logic for variou stages of building the component

# Copies the component source code into the building area
function component_gather
{
    rsync -a --exclude=.svn ${BUILD_ROOT}/src/linux/(SOURCE DIR GOES HERE) ${GATHER_DIR}/
}

# Helper function to set up build environment -- this is not called directly by the build system,
# and is just a convention
function _setup_build_env
{
    set_compiler_env

    cd ${BUILDING_ROOT}/(SOURCE DIR GOES HERE)
    exit_on_error $?

    CFLAGS="${_cflags}"
    LDFLAGS="${_ldflags}"

    # Extra logic for setting CFLAGS/CPPFLAGS/LDFLAGS for various platforms goes here

    export CPPFLAGS LDFLAGS CFLAGS
}

# Performs the configure stage, generally by running autogen.sh followed by configure
function component_configure
{
    _setup_build_env

    ./autogen.sh
    exit_on_error $?

    ./configure \
	--(PUT FLAGS HERE)
}

# Peforms the build stage, generally by running make
function component_build
{
    _setup_build_env

    ${MAKE} ${_mflags}
}

# Peforms the staging stage, generally by running make install or copying bits
# explicitly into the staging directory
function component_stage
{
    _setup_build_env

    ${MAKE} DESTDIR=${STAGING_PREFIX_DIR} install

}

# Peforms the populate stage, generally by copying desired bits from the
# staging directory into the populate directory, along with
# config files, init script, and other vendor files
function component_populate
{
    COMP_NAME=COMPONENT NAME GOES HERE
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    if [ -z "${IS_COMPAT}" ]; then
	mkdir -p ${POPULATE_ROOT_DIR}
	rsync -a --exclude "${PREFIX_DIR}/include" ${COMP_ROOT_DIR}/ ${POPULATE_ROOT_DIR}/
    else
	mkdir -p ${POPULATE_PREFIX_DIR}/${_lib}
	rsync -a ${COMP_PREFIX_DIR}/${_lib}/ ${POPULATE_PREFIX_DIR}/${_lib}/
    fi
}
