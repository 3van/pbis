COMP_INCREMENTAL=1
COMP_DEPENDENCIES="autoconf automake libtool"
COMP_SOURCES=${BUILD_ROOT}/src/linux/pkg-config
COMP_IS_TOOL=1

function component_bootstrap
{
    cd "${COMP_SOURCES}" && autoreconf -fi
    exit_on_error $?
}

function component_gather
{
    echo "Nothing to gather for ${COMP_NAME}"
}

function _setup_build_env
{
    set_compiler_env

    LDFLAGS="${_ldflags}"
    CFLAGS="${_cflags}"
    CPPFLAGS="${_cppflags}"

    export LDFLAGS CFLAGS CPPFLAGS

    libtool_set_staging_library_path

    cd ${BUILDING_ROOT}
    exit_on_error $?
}

function get_ld_pc_path
{
    set +x
    (
	IFS=$'\n'
	for line in `cat "$1" | sed 's/#.*//g'`
	do
	    if echo "$line" | grep "^include" >/dev/null 2>&1
	    then
		for file in `echo "$line" | awk '{print $2}'`
		do
		    get_ld_pc_path "$file"
		done
	    elif echo "$line" | grep "^/" >/dev/null 2>&1 && test -d "$line/pkgconfig"
	    then
		echo "$line/pkgconfig"
	    fi
	done
    ) | xargs | sed 's/ /:/g'
}

function get_pc_path
{
    local path="/usr/lib/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig"
    if test -f "/etc/ld.so.conf"
    then
	path="$path:`(get_ld_pc_path /etc/ld.so.conf)`"
    fi
    echo "$path"
}

function component_configure
{
    _setup_build_env

    PC_PATH="`get_pc_path`"

    "${COMP_SOURCES}/configure" --prefix="${BUILD_RUN_ROOT}" --with-pc-path="${PC_PATH}" ${DEPENDENCY_TRACKING}
}

function component_build
{
   _setup_build_env

   ${MAKE} ${_mflags} all
}

function component_stage
{
    _setup_build_env

    ${MAKE} DESTDIR="${STAGING_ROOT_DIR}" install
}

function component_populate
{
    echo "SHOULD NOT BE HERE"
    exit 1
}
