#!/bin/bash

COMP_NEED_COMPAT=1
COMP_NEED_FOREIGN=1
COMP_INCREMENTAL=1
COMP_DEPENDENCIES="autoconf automake libtool sqlite netlogon pstore openssl libuuid eventlog lwdns lwmsg lwbase lwio dcerpc lwadvapi lwreg"
COMP_SOURCES=${BUILD_ROOT}/src/linux/lsass


function component_bootstrap
{
    cd "${COMP_SOURCES}" && ./autogen.sh
    exit_on_error $?
}

function component_gather
{
    echo "Nothing to gather for ${COMP_NAME}"
}

function _setup_dirs
{
    case "${BUILD_OS_TYPE}-${BUILD_OS_ARCH}" in
	linux-i386)
	    NSS_DIR="/lib"
	    PAM_DIR="/lib/security"
	    ;;
	linux-x86_64|linux-s390*)
	    if [ -n "${IS_COMPAT}" ]
	    then
		NSS_DIR="/lib32"
		PAM_DIR="/lib32/security"
	    else
		NSS_DIR="/lib64"
		PAM_DIR="/lib64/security"
	    fi
	    ;;
	solaris-sparc)
	    if [ -n "${IS_COMPAT}" ]
	    then
		NSS_DIR="/usr/lib/sparcv9"
		PAM_DIR="/usr/lib/security/sparcv9"
	    else
		NSS_DIR="/usr/lib"
		PAM_DIR="/usr/lib/security"
	    fi
	    ;;
	solaris-i386)
	    if [ -n "${IS_COMPAT}" ]
	    then
		NSS_DIR="/usr/lib/amd64"
		PAM_DIR="/usr/lib/security/amd64"
	    else
		NSS_DIR="/usr/lib"
		PAM_DIR="/usr/lib/security"
	    fi
	    ;;
	freebsd-*)
	    NSS_DIR="/usr/local/lib"
	    PAM_DIR="/usr/local/lib"
	    ;;
        darwin-*)
	    NSS_DIR="/usr/lib"
	    PAM_DIR="/usr/lib/pam"
	    ;;
        hpux-ia64)
	    if [ -n "${IS_FOREIGN}" ]; then
		NSS_DIR="/usr/lib"
		PAM_DIR="/usr/lib/security"
	    elif [ -n "${IS_COMPAT}" ]; then
		NSS_DIR="/usr/lib/hpux64"
		PAM_DIR="/usr/lib/security/hpux64"
	    else
		NSS_DIR="/usr/lib/hpux32"
		PAM_DIR="/usr/lib/security/hpux32"
	    fi
	    ;;
        hpux-hppa20)
            if [ -n "${IS_COMPAT}" ]; then
		NSS_DIR="/usr/lib/pa20_64"
		PAM_DIR="/usr/lib/security/pa20_64"
	    else
		NSS_DIR="/usr/lib"
		PAM_DIR="/usr/lib/security"
	    fi
	    ;;
	aix-powerpc)
	    if [ -n "${IS_COMPAT}" ]; then
		NSS_DIR="/usr/lib/security"
		PAM_DIR="/usr/lib/security/64"
            else
		NSS_DIR="/usr/lib/security"
		PAM_DIR="/usr/lib/security"
	    fi
	    ;;
	*)
	    NSS_DIR="/lib"
	    PAM_DIR="/lib/security"
	    ;;
    esac

    export NSS_DIR PAM_DIR
}

function _setup_build_env
{
    set_compiler_env

    cd ${BUILDING_ROOT}
    exit_on_error $?

    CFLAGS="${_cflags} ${CFLAGS}"
    LDFLAGS="${_ldflags} ${LDFLAGS}"
    CPPFLAGS="${_cppflags} ${CPPFLAGS}"

    export PATH CPPFLAGS LDFLAGS CFLAGS CC

    libtool_set_staging_library_path
    libtool_set_staging_path
}

function component_configure
{
    local lsass_version=""
    local build_version="${OFFICIAL_BUILD_NUMBER}"
    local extra_flags=""

    _setup_build_env
    _setup_dirs

    if [ -z "${build_version}" ]; then
       build_version="0"
    fi

    lsass_version="`echo ${MAIN_VERSION} | sed 's/\..$//'`.${build_version}.${SVN_REVISION}"

    if [ -n "${BUILD_DEBUG}" ]
    then
	extra_flags="$extra_flags --enable-debug"
    fi

    if [ -n "${BUILD_PROFILING}" ]
    then
	extra_flags="$extra_flags --enable-profiling"
    fi

    if [ -n "${IS_COMPAT}" ]
    then
	extra_flags="$extra_flags --enable-compat"
    fi

    if [ -n "${BUILD_MINIMAL}" ]
    then
	extra_flags="$extra_flags --enable-minimal --enable-static-providers --with-providers=ad --disable-rpcserver --disable-pidfile --enable-small-daemon"
    fi

    "${COMP_SOURCES}/configure"                        \
	--prefix=${PREFIX_DIR}                         \
        --libdir=${PREFIX_DIR}/${_lib}                 \
	--sysconfdir=${BUILD_SYSCONFDIR}               \
	--localstatedir=${BUILD_LOCALSTATEDIR}         \
        --with-pam-libdir=${PAM_DIR}                   \
        --with-nss-libdir=${NSS_DIR}                   \
        --with-version=${lsass_version}                \
	${extra_flags}                                 \
        ${DEPENDENCY_TRACKING}                         \
	LDFLAGS="$(libtool_staging_ldflags) $LDFLAGS"  \
	CPPFLAGS="$(libtool_staging_cppflags) $CPPFLAGS"
}

function component_build
{
    _setup_build_env

    ${MAKE} ${_mflags} all
}

function component_stage
{
    _setup_build_env

    ${MAKE} DESTDIR=${STAGING_ROOT_DIR} install

    libtool_rewrite_staging
}

function component_populate
{
    COMP_NAME=lsass
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    _setup_dirs

    mkdir -p ${POPULATE_PREFIX_DIR}

    if [ -n "${IS_FOREIGN}" ]
    then
	mkdir -p ${POPULATE_ROOT_DIR}${NSS_DIR}
	mkdir -p ${POPULATE_ROOT_DIR}${PAM_DIR}
	mkdir -p ${POPULATE_PREFIX_DIR}/${_lib}
	rsync -a ${COMP_ROOT_DIR}${NSS_DIR}/ ${POPULATE_ROOT_DIR}${NSS_DIR}/
	rsync -a ${COMP_ROOT_DIR}${PAM_DIR}/ ${POPULATE_ROOT_DIR}${PAM_DIR}/
	rsync -a ${COMP_PREFIX_DIR}/${_lib}/ ${POPULATE_PREFIX_DIR}/${_lib}/
    else
	rsync -a ${COMP_ROOT_DIR}/ ${POPULATE_ROOT_DIR}/
    fi
    rm -rf ${POPULATE_PREFIX_DIR}/test

    # Remove internal headers unless we're building the platform image.
    if [ "${PKG_TYPE}" != "platform" ]
    then
        rm -rf ${POPULATE_PREFIX_DIR}/include/lsa/internal
    fi
    
    # Move around NSS/PAM modules based on distro
    # This is because /lib is 64-bit on Debian and
    # 32-bit on RedHat
    case "${BUILD_OS_TYPE}-${BUILD_OS_ARCH}-${PKG_TYPE}-`[ -n "${IS_COMPAT}" ] && echo yes || echo no`-`[ -n "${IS_FOREIGN}" ] && echo yes || echo no`" in
	linux-x86_64-deb-no-no)
	    mv "${POPULATE_ROOT_DIR}/lib64" "${POPULATE_ROOT_DIR}/lib"
	    ;;
	linux-x86_64-rpm-yes-no|linux-s390*-rpm-yes-no)
	    mv "${POPULATE_ROOT_DIR}/lib32" "${POPULATE_ROOT_DIR}/lib"
	    ;;
	hpux-ia64-depot-no-yes)
	    ln -s pam_lsass.sl "${POPULATE_ROOT_DIR}/usr/lib/security/pam_lsass.so"
	    ;;
    esac

    if [ -z "${IS_COMPAT}" -a -z "${IS_FOREIGN}" ]; then
        # Handle init scripts
	local script=lsassd
	x_mkinit \
            "${BUILD_ROOT}/src/linux/config/${script}" \
            ${script} \
            01 01 \
            likewise.lsassd 21 09
	
	if [ "${BUILD_OS_TYPE}" = 'solaris' ]; then
            mkdir -p ${POPULATE_ROOT_DIR}/etc/likewise/svcs-solaris
            x_cp 0755 ${BUILD_ROOT}/src/linux/config/svcs-solaris/lsassd.xml ${POPULATE_ROOT_DIR}/etc/likewise/svcs-solaris/.
	fi
	
	if [ "${BUILD_OS_TYPE}" = 'darwin' ]; then
            mkdir -p ${POPULATE_ROOT_DIR}/etc/likewise/LaunchDaemons
            x_cp 0755 ${BUILD_ROOT}/src/linux/config/com.likewisesoftware.lsassd.plist ${POPULATE_ROOT_DIR}/etc/likewise/LaunchDaemons/.
            x_cp 0755 ${BUILD_ROOT}/src/linux/config/lw-local-user-migrate.sh.in ${POPULATE_PREFIX_DIR}/bin/lw-local-user-migrate.sh
	fi
    fi

    libtool_rewrite_populate
}
