#!/bin/bash -c "exit 1"

if [ -d "${BUILD_DIST_ROOT}/windows/x86" ]
then
    COMP_SOURCES="${BUILD_DIST_ROOT}/windows/x86"
    COMP_DISABLE_CACHE=1
else
    COMP_SOURCES="${BUILD_ROOT}/packages/windows/binaries"
fi

COMP_OPTIONS=( \
    "COMPARG_LAC_MONO_NO_USE_PREBUILT	If defined, do not use pre-built binaries (default is to try \${BUILD_DIST_ROOT}/windows/x86 and \${BUILD_ROOT}/packages/windows/binaries" \
    "COMPARG_LAC_MONO_USE_PREBUILT_DIR	Set to point to directory where to find pre-built binaries" \
    )

LAC_BINARIES="\
lacconsole \
Likewise.LMC.exe \
Likewise.LMC.Utilities.dll \
Likewise.LMC.UtilityUIElements.dll \
Likewise.LMC.ServerControl.unix.dll \
Likewise.LMC.NETAPI.dll \
Likewise.LMC.Netlogon.dll \
Likewise.LMC.LDAP.dll \
Likewise.LMC.Krb5.dll \
Likewise.LMC.Registry.dll \
Likewise.LMC.Eventlog.dll \
Likewise.LMC.Services.dll \
Likewise.LMC.FileClient.dll \
Likewise.LMC.SecurityDescriptor.dll \
Likewise.LMC.MMCPageUtils.dll \
Likewise.LMC.Plugins.RootPlugin.unix.dll \
Likewise.LMC.Plugins.LUGPlugin.unix.dll \
Likewise.LMC.Plugins.ADUCPlugin.dll \
Likewise.LMC.Plugins.CellManagerPlugin.dll \
Likewise.LMC.Plugins.EventlogPlugin.dll \
Likewise.LMC.Plugins.GPMCPlugin.dll \
Likewise.LMC.Plugins.GPOEPlugin.dll \
Likewise.LMC.Plugins.RegistryViewerPlugin.dll \
Likewise.LMC.Plugins.ServiceManagerPlugin.dll \
Likewise.LMC.Plugins.FileShareManager.dll \
Likewise.LMC.Plugins.FileBrowser.dll \
AuthPlugIn.unix.dll \
AuthAdmin.unix.dll \
DSUtil.unix.dll \
GPMCConnector.unix.dll \
LWCellSnapIn.unix.dll \
LWGroupSnapIn.unix.dll \
LWIGPCommon.unix.dll \
LWIGPMC.unix.dll \
LWIGPMCSnapIn.unix.dll \
LWIGPOE.unix.dll \
LWIGPSnapIn.unix.dll \
LWUnifiedProvider.unix.dll \
LWUserSnapIn.unix.dll \
Microsoft.ManagementConsole.dll \
System.DirectoryServices.dll \
"


#
# lac.comp -- see ../../helper.sh for how this file works.
#

function _setup_env
{
    __USE_PREBUILT=1
    
    # COMPARG_LAC_MONO_NO_USE_PREBUILT
    # COMPARG_LAC_MONO_USE_PREBUILT_DIR

    if [ -n "${COMPARG_LAC_MONO_USE_PREBUILT_DIR}" ]; then
        __USE_PREBUILT=1
        __USE_PREBUILT_DIR="${COMPARG_LAC_MONO_USE_PREBUILT_DIR}"
    fi

    if [ -n "${COMPARG_LAC_MONO_NO_USE_PREBUILT}" ]; then
        __USE_PREBUILT=
    fi

    if [ -n "${__USE_PREBUILT}" ]; then
        if [ -z "${__USE_PREBUILT_DIR}" ]; then
            if [ -d "${BUILD_DIST_ROOT}/windows/x86" ]; then
                __USE_PREBUILT_DIR="${BUILD_DIST_ROOT}/windows/x86"
            else
                __USE_PREBUILT_DIR="${BUILD_ROOT}/packages/windows/binaries"
            fi
        fi
        if [ ! -d "${__USE_PREBUILT_DIR}" ]; then
            echo "Directory ${__USE_PREBUILT_DIR} does not exist."
            exit 1
        fi

    else
        if [ -z "$BUILD_MONO_HOME" ]; then
            echo "BUILD_MONO_HOME is not defined"
            exit 1
        fi
    fi

}

function component_bootstrap
{
    echo "Nothing to bootstrap for ${COMP_NAME}"
}

function component_gather
{
    _setup_env

    if [ -n "${__USE_PREBUILT}" ]; then
        echo "Copying pre-built MS.NET assemblies from ${__USE_PREBUILT_DIR}..."
        mkdir -p ${GATHER_DIR}/output/dist/windows/x86

	local file
	for file in ${LAC_BINARIES} ; do
            cp ${__USE_PREBUILT_DIR}/${file} ${GATHER_DIR}/output/dist/windows/x86/
	done

    else
        echo "Using sources..."
        mkdir -p ${GATHER_DIR}/build
        mkdir -p ${GATHER_DIR}/tools
        mkdir -p ${GATHER_DIR}/src/windows/Quartz
        rsync -a --exclude=.svn ${BUILD_ROOT}/build/ ${GATHER_DIR}/build/
        rsync -a --exclude=.svn ${BUILD_ROOT}/tools/ ${GATHER_DIR}/tools/
        rsync -a --exclude=.svn ${BUILD_ROOT}/src/windows/Quartz/ ${GATHER_DIR}/src/windows/Quartz/
    fi
}

function component_configure
{
    echo > /dev/null
}

function component_build
{
    _setup_env

    if [ -e output/dist/windows/x86/Likewise.LMC.exe ]; then
        echo "Skipping build -- using MS.NET assemblies..."
    else
        source build/buildenv
        buildtool clean
        buildtool cleandist
        # Convert paths in resources so Mono is happy
        lac_dir=src/windows/Quartz
        subdirs="\
            ServerControl \
            LikewiseConsole \
            Plugins/RootPlugin \
            Plugins/LUGPlugin \
            Plugins/EventlogPlugin \
            Plugins/ADUCPlugin \
            Plugins/CellManagerPlugin \
"
        for dir in ${subdirs} ; do
            cur_dir=${lac_dir}/${dir}
            echo "Processing Windows paths in ${cur_dir}"
            res_dir="${cur_dir}/Resources"
            if [ -d "${res_dir}" ]; then
                for f in `find ${cur_dir} -name "*.resx"` ; do
                    /bin/sed \
                        -e "s#\\.\\.\\\\Resources#$RESDIR#g" \
                        -e "s#\\.\\./Resources#$RESDIR#g" \
                        -e "s#\\\\#/#g" \
                        $f > $f.bak
                    mv $f.bak $f
                done
            fi
        done
        ( cd src/windows/Quartz && buildtool )
    fi
}

function component_stage
{
    if [ -e output/dist/windows/x86/Likewise.LMC.exe ]; then
        echo "Installing Windows binaries..."
        __BUILD_DIST_OS_ROOT=output/dist/windows/x86
    else
        __BUILD_DIST_OS_ROOT="${BUILD_DIST_OS_ROOT}"
    fi

    mkdir -p ${STAGING_PREFIX_DIR}/bin
    mkdir -p ${STAGING_PREFIX_DIR}/etc

    local file
    for file in ${LAC_BINARIES} ; do
        x_cp 0755 ${__BUILD_DIST_OS_ROOT}/${file} ${STAGING_PREFIX_DIR}/bin/.
        if [ -f ${__BUILD_DIST_OS_ROOT}/${file}.mdb ]; then
            x_cp 0755 ${__BUILD_DIST_OS_ROOT}/${file}.mdb ${STAGING_PREFIX_DIR}/bin/.
        fi
    done

    x_cp 0644 ${BUILD_ROOT}/src/windows/Quartz/scripts/lwigpoe.xml ${STAGING_PREFIX_DIR}/bin/.
    x_cp 0644 ${BUILD_ROOT}/src/windows/Quartz/scripts/lwigpmc.xml ${STAGING_PREFIX_DIR}/bin/.

    x_cp 0644 ${BUILD_ROOT}/src/windows/Quartz/scripts/mono.config ${STAGING_PREFIX_DIR}/etc/.

}
#!/bin/bash

function component_populate
{
    COMP_NAME=lac
    COMP_PREFIX_DIR=`get_comp_staging_prefix_dir ${COMP_NAME}`
    COMP_ROOT_DIR=`get_comp_staging_root_dir ${COMP_NAME}`

    mkdir -p ${POPULATE_PREFIX_DIR}
    rsync -a ${COMP_PREFIX_DIR}/ ${POPULATE_PREFIX_DIR}/

    mkdir -p ${POPULATE_PREFIX_DIR}/etc
    rsync -a ${COMP_PREFIX_DIR}/etc ${POPULATE_PREFIX_DIR}/etc

}
