#!/bin/bash

if [ -z "${BUILD_ROOT}" ]; then
    echo "You need to source buildenv first"
    exit 1
fi

function exit_on_error
{
    if [ $1 -ne 0 ]; then
        if [ -n "$2" ]; then
            echo "$2"
        fi
        exit $1
    fi
}

. ${BUILD_ROOT}/src/linux/build/common.sh
exit_on_error $?

function usage
{
    echo "usage: `basename $0` [options] < build | show >"
    echo ""
    echo "  options:"
    echo ""
    echo "    --nocomp - Skip building components."
    echo ""
    echo "    --nocopy - Do not use cached staging images for any component."
    echo ""
    echo "    --noincremental - Do not peform incremental builds for any component."
    echo ""
    echo "    --nocompat - Skip building compat libraries."
    echo ""
    echo "    --source - Create source tarballs."
    echo ""
    echo "    --type, -t <pkgType> - Do the specified package type(s)."
    echo "        This can be specified multiple times."
    echo ""
    echo "    --cacheupdate - Before building, update local staging cache"
    echo "        from dist directory and prune old archives."
    echo ""
    echo "  symbol options:"
    echo ""
    echo "    --debug           Force build with debug information."
    echo "    --nodebug         Force build without debug information."
    echo "    --profiling         Force build with profiling information."
    echo "    --noprofiling       Force build without profiling information."
    echo ""
    echo "  commands:"
    echo ""
    echo "    build - Build the components, packages, sfx."
    echo ""
    echo "    show - Show what would get run if 'build' command were used."
    exit 1
}

function _contains
{
    for i in $1; do
        if [ "$i" = "$2" ]; then
            return 0
        fi
    done

    return 1
}

function _archive_sort
{
    ( 
        for archive in "$@"
        do 
            basename $archive | sed 's/-/ /' | sed 's/-/ /' | sed 's/-/ /'
        done 
    ) | sort -r -k 4 -k 3 | uniq -f 3 | sed 's/ /-/g'
}

function update_cache
{
    local dist="${BUILD_DIST_OS_ROOT}/components/"
    local cache="${BUILD_CACHE_OS_ROOT}/components/"
    local comp
    local archive
    local unique

    [ -z "$RUN" ] && echo "Updating local cache from dist directory" >&2

    ${RUN} mkdir -p "${cache}" ${RUNSUFFIX}
    ${RUN} rsync -a "${dist}" "${cache}" ${RUNSUFFIX}

    [ -z "$RUN" ] && echo "Removing stale archives" >&2

    for comp in ${cache}/*; do
        if [ -d "${comp}" ]; then
            [ -z "$RUN" ] && echo "Component: $(basename ${comp})"
            unique=$(_archive_sort ${comp}/*.tar.*)
            for archive in ${comp}/*.tar.*; do
                if [ -f "${archive}" ]; then
                    if _contains "$unique" "$(basename $archive)"; then
                        [ -z "$RUN" ] && echo "Keeping $(basename ${archive})" >&2
                    else
                        [ -z "$RUN" ] && echo "Pruning $(basename ${archive})" >&2
                        ${RUN} rm -f "${archive}" ${RUNSUFFIX}
                    fi
                fi
            done
        fi
    done
}

function make_test
{
    ${RUN} mktest ${RUNSUFFIX}
}

function main
{
    OPTS=""

    PKG_TYPE_LIST=""
    OPT_NOCOPY=""
    OPT_NOCOMPAT=""
    OPT_SOURCE_ARCHIVE=""
    OPT_PROFILE=""
    OPT_PRODUCT=""
    OPT_NOTEST=""
    OPT_NOTOOL=""

    parseOptDone=""

    while [ -z "${parseOptDone}" ]; do
        case "$1" in
            --help)
                usage "$0"
                exit 0
                ;;
            --nocomp)
                OPT_NOCOMP=1
                OPT_PRODUCT="$OPT_PRODUCT --nocomp"
                shift
                ;;
            --onlycomp|--nopkg)
                OPT_ONLYCOMP=1
                OPT_PRODUCT="$OPT_PRODUCT --onlycomp"
                shift
                ;;
            --nocopy)
                OPT_NOCOPY=1
                OPT_PRODUCT="$OPT_PRODUCT --nocopy"
                shift
                ;;
            --noincremental)
                OPT_NOINCREMENTAL=1
                OPT_PRODUCT="$OPT_PRODUCT --noincremental"
                shift
                ;;
            --nocompat)
                OPT_NOCOMPAT=1
                OPT_PRODUCT="$OPT_PRODUCT --nocompat"
                shift
                ;;
            --notest)
                OPT_NOTEST=1
                shift
                ;;
            --notool)
                OPT_NOTOOL=1
                OPT_PRODUCT="$OPT_PRODUCT --notool"
                shift
                ;;
            --compat)
                OPT_COMPAT=1
                OPT_PRODUCT="$OPT_PRODUCT --compat"
		OPT_PLATFORM="$OPT_PLATFORM --compat"
                shift
                ;;
            --profile)
                OPT_PROFILE="$2"
                shift
                shift
                ;;
            --srcdist)
                OPT_SRCDIST=1
                shift;
                ;;
            --source)
                OPT_SOURCE_ARCHIVE=1
                OPT_PRODUCT="$OPT_PRODUCT --archive"
                shift
                ;;
            --type|-t)
                if [ -z "$2" ]; then
                    echo "Missing argument to $1 option."
                    exit 1
                fi
                PKG_TYPE_LIST="${PKG_TYPE_LIST} $2"
                shift
                shift
                ;;
            --cacheupdate|__cacheupdate)
                OPT_CACHE_UPDATE=1
                shift
                ;;
            --debug)
                OPT_PRODUCT="$OPT_PRODUCT --debug"
                shift
                ;;
            --nodebug)
                OPT_PRODUCT="$OPT_PRODUCT --nodebug"
                shift
                ;;
            --profiling)
                OPT_PRODUCT="$OPT_PRODUCT --profiling"
                shift
                ;;
            --noprofiling)
                OPT_PRODUCT="$OPT_PRODUCT --noprofiling"
                shift
                ;;
            *)
                parseOptDone=1
                ;;
        esac
    done

    RUN=echo
    RUNSUFFIX=""
    case "$1" in
        build)
            RUN=""
            shift
            ;;
        show)
            RUN=echo
            RUNSUFFIX="&&"
            OPT_PRODUCT="$OPT_PRODUCT --show"
            shift
            ;;
        *)
            usage
            ;;
    esac

    if [ -n "$1" ]; then
        usage
    fi

    if [ -n "${OPT_PROFILE}" ]
    then
        load_profile "${OPT_PROFILE}"
    fi

    products="${BUILD_PRODUCTS}"

    timer_start "mkall${_pkgtypes_suffix}"
    (
        if [ -n "${OPT_CACHE_UPDATE}" ]; then
            update_cache
            exit_on_error $?
        fi

        if [ -n "${PKG_TYPE_LIST}" ]
        then
            mkproduct ${OPT_PRODUCT} --type "${PKG_TYPE_LIST}" ${products}
            exit_on_error $?
        else
            mkproduct ${OPT_PRODUCT} ${products}
            exit_on_error $?
        fi
        if ! [ -n "${OPT_NOTEST}" ]
        then
            make_test
        fi

        if [ -n "${OPT_SRCDIST}" -a -n "${BUILD_SRCDIST}" ]; then
            for product in ${BUILD_SRCDIST} ; do
                ${RUN} mksrcdist ${product} ${RUNSUFFIX}
            done
        fi

	${RUN} mkplatform ${OPT_PLATFORM} ${BUILD_PLATFORM_PRODUCTS} ${RUNSUFFIX}
	exit_on_error $?

        ${RUN} true
    )
    rc=$?
    timer_stop
    exit_on_error $rc
}

main "$@"
exit $?
