Componentized Build
-------------------

The main goal of the componentzied build is to separate building binaries
from how they are packaged.

The utilities for componentized build are in src/linux/build:

  - mkcomp -- builds one or more components
  - mkpkg -- build a package (using built components)
  - mksfx -- builds sfx installer (from packages)

Main Versioning
---------------

The build assumes that there is main product that has a version.
The main product name and version info is stored in the file:

 version.sh

as MAIN_NAME, MAIN_VERSION, MAIN_RELEASE.

Helpers
-------

The main mk* utilities use helper functionality in the ./lib subdirectory.
These include helper functions that are shared and that may be made
available to the component and package scriptlets (see below).

Components
----------

A component is specified via files in src/linux/build/components/NAME
where the NAME is the name/alias of the component.  That directory
must contain NAME.comp and can optionally contain NAME.vars.
These are both scriptlets that are sourced by mkcomp to get information
or perform tasks.

NAME.vars can contain variables that tell mkcomp about the component.
These include:

COMP_NEED_COMPAT_32 - defined to indicate that compat libs need to be built
COMP_VERSION - defined to set a version for the component (if 3rd party)
COMP_RELEASE - defined to set a release number for the component (if 3rd
party)

NAME.comp contains these functions:

  - component_gather
  - component_configure
  - component_build
  - component_stage

(see ./lib/mkcomp-helper.sh for information on .comp and .vars files,
including about what variables and helper function are available.)

Components get built into $BUILD_META_OS_ROOT/components/NAME.
This contains the following subdirs:

  - gather -- where sources get rsync-ed so we can generate a source tarball.

  - sources -- where we expand the tarball and build.

  - install -- where the component can be optionally "install"-ed.

  - staging -- where we stage the files we may want to use from the component,
      e.g., headers and libs use by other components.

mkcomp does a component build using the stages:

  - clean -- clean out $BUILD_META_OS_ROOT/components/NAME

  - gather -- copy component files into gather sub-directory
      under MAIN_NAME-MAIN_VER-NAME(-VER) directory and tar them up as
      MAIN_NAME-MAIN_VER-NAME(-VER)-sources.tar.bz2

  - expand -- expand tarball into sources sub-directory.

  - configure -- run autogen and configure steps in expanded sources.

  - build -- run make steps in expanded sources.

  - stage -- (re)create install and staging sub-directories and
      perform install/staging procedure to get binaries from
      sources dir to staging dir (using install dir, if needed).

  - archive -- create a tarball of the staging directory in the top-level
      component meta directory.

You can control which stages you run.  For example, if you just tweaked
how a component is staged, you can re-run the stage and archiving steps:

  mkcomp --step stage: NAME

Packaging
---------

Packages are defined in src/linux/build/packages/NAME/TYPE.
...(currently in flux)...

See mkpkg and lib/mkpkg-helper.sh and more...

[Need to add more docs.]
