#!/bin/bash

source "${BUILD_ROOT}/src/linux/build/common.sh"
source "${BUILD_ROOT}/src/linux/build/lib/dep-helper.sh"
source "${BUILD_ROOT}/src/linux/build/version.sh"

MAX_CONCURRENT=8
SLEEP_SECONDS=15

seq_replacement()
{
    FIRST=1
    INCREMENT=1
    case "$#" in
        0)
            echo too few arguments
            return 1
            ;;
        1)
            LAST="$1"
            ;;
        2)
            FIRST="$1"
            LAST="$2"
            ;;
        3)
            FIRST="$1"
            INCREMENT="$2"
            LAST="$3"
            ;;
        *)
            echo too many arguments
            return 1
            ;;
    esac
    i="$FIRST"
    while [ "$i" -le "$LAST" ]; do
        echo "$i"
        i="`expr "$i" + "$INCREMENT"`"
    done
    return 0;
}

# seq doesn't exist on HPUX or FreeBSD
type seq 2>/dev/null 1>/dev/null
if [ $? -ne 0 ]; then
    seq=seq_replacement
else
    seq=seq
fi

do_bootstrap()
{
    while [ -n "$1" ]
    do
	list=""
	pids=""
	status=0
	for i in `$seq 1 $MAX_CONCURRENT`
	do
	    list="$list $1"
	    shift
	done

	echo "Bootstrapping: ${list}"
	for comp in ${list}
	do
	    mkdir -p "${BUILD_META_OS_ROOT}/components/${comp}"
	    mkcomp --force-bootstrap ${comp} \
		> "${BUILD_META_OS_ROOT}/components/${comp}/bootstrap.log" 2>&1 &
	    pids="$pids $!"
	done

	for pid in ${pids}
	do
	    wait "$pid" || status="$?"
	done

	for comp in ${list}
	do
	    if [ -f "${BUILD_META_OS_ROOT}/components/${comp}/bootstrap.log" ]
	    then
		cat "${BUILD_META_OS_ROOT}/components/${comp}/bootstrap.log"
		rm -f "${BUILD_META_OS_ROOT}/components/${comp}/bootstrap.log"
	    fi
	done

	exit_on_error $status
    done
}

usage()
{
    echo "usage: `basename $0` [options] [<product> ...]"
    echo ""
    echo "  description:"
    echo ""
    echo "    Force bootstrap of all component depedencies for the default products:"
    echo ""
    for prod in ${BUILD_PRODUCTS} ; do
        echo "        ${prod}"
    done
    echo ""
    echo "    To bootstrap component dependencies for specific products, specify the"
    echo "    desired products on the command line."
    echo ""
    echo "    In every case, a new src/linux/BOOTSTRAP file is created that will"
    echo "    prevent automatic bootstrapping by mkcomp."
    echo ""
    echo "    To forcibly bootstrap specific components without touching the"
    echo "    src/linux/BOOTSTRAP file, see mkcomp's --force-bootstrap."
    echo ""
    echo "  options:"
    echo ""
    echo "    --nosleep  -- Do not sleep at the end of the bootstrapping."
    echo "                  By default, this tool sleeps for ${SLEEP_SECONDS} at the end of"
    echo "                  the bootstrapping process as a hack to account for"
    echo "                  unsynchronized clocks between the bootstrap machine"
    echo "                  and the build machine(s)."
    exit 1
}

sleep_seconds=${SLEEP_SECONDS}
products=""
while true ; do
    case "$1" in
        --help)
            usage
            ;;
        --nosleep)
            sleep_seconds=""
            ;;
        -*)
            echo "Unrecognized option $1"
            usage
            ;;
        '')
            break
            ;;
        *)
            products="${products} $1"
            ;;
    esac
    shift
done

if [ -z "${products}" ]; then
    products="${BUILD_PRODUCTS}"
    is_all=1
fi

for prod in $products ; do
    if ! product_exists $prod ; then
        echo "Product '$prod' does not exist"
        exit 1
    fi
done

components=$(component_build_list $(product_components ${products}))

tools=""
nontools=""

echo products=$products
echo components=$components

for comp in ${components}
do
    if component_is_tool "${comp}"
    then
	tools="$tools $comp"
    else
	nontools="$nontools $comp"
    fi
done

rm -f "${BUILD_ROOT}/src/linux/BOOTSTRAP"

if [ -n "${tools}" ]; then
    echo "Building tools"
    mkcomp ${tools}
    exit_on_error $?
fi

if [ -n "${nontools}" ]; then
    echo "Bootstrapping non-tool components"
    do_bootstrap ${nontools}
    exit_on_error $?
fi

echo "${SVN_REVISION}" > "${BUILD_ROOT}/src/linux/BOOTSTRAP"

if [ -n "${sleep_seconds}" ]; then
    # NOTE: This sleep is a hack for unsynchronized clocks between
    #       the bootstrap machine and the build machine.
    echo "Sleeping for ${sleep_seconds} seconds"
    sleep ${sleep_seconds}
fi
