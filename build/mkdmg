#!/bin/bash

if [ -z "${BUILD_ROOT}" ]; then
    echo "You need to source buildenv first"
    exit 1
fi

ARCH_RENAME="$BUILD_OS_ARCH"

case "${OSTYPE}" in
    darwin10.*)
        ARCH_RENAME="OSX10.6-universal"
        ;;
esac

echo "Building Mac DMG for $ARCH_RENAME architecture"

function exit_on_error
{
    if [ $1 -ne 0 ]; then
        if [ -n "$2" ]; then
            echo "$2"
        fi
        exit $1
    fi
}

##
## Setup the environment
##
source ${BUILD_ROOT}/src/linux/build/common.sh
exit_on_error $?

source ${BUILD_ROOT}/src/linux/build/version.sh
exit_on_error $?

source ${BUILD_ROOT}/src/linux/build/lib/dep-helper.sh
exit_on_error $?

# Clean up a partial build.
function cleanup
{
    status=$?

    if [ "${BUILD_DMG_TMP_DIR}" ]; then
        rm -rf "${BUILD_DMG_TMP_DIR}"
    fi

    if [ $status -ne 0 ]; then
        warn "Exiting on error $status"
    fi

    trap EXIT
    exit $status
}

function usage
{
    local _products=`product_list`
    echo "usage: `basename $0` <productName> [<productName2> ...]"
    echo ""
    echo "  product names:"
    echo ""
    local _product
    for _product in ${_products} ; do
        echo "        ${_product}"
    done
    exit 1
}

function main
{
    trap "cleanup" EXIT HUP INT QUIT TERM

    parseOptDone=""
    while [ -z "$parseOptDone" ]; do
        case "$1" in
            --help)
                usage
                ;;
            *)
                parseOptDone=1
                ;;
        esac
    done

    PRODUCTS="$@"
    if [ -z "${PRODUCTS}" ] ; then
        usage
    fi

    PMAKER=/Developer/Applications/Utilities/PackageMaker-2.1.1/PackageMaker.app/Contents/MacOS/PackageMaker
    if [ ! -x "${PMAKER}" ]; then
        PMAKER=/Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/PackageMaker
        if [ ! -x "${PMAKER}" ]; then
            warn "Could not find ${PMAKER}."
            exit 1
        fi
    fi

    OUT_DIR="${BUILD_DIST_OS_ROOT}/dmg"
    mkdir -p "${OUT_DIR}"
    exit_on_error $?

    for PRODUCT in ${PRODUCTS} ; do
        PRODUCT_NAME=`product_name $PRODUCT`
        exit_on_error $? "Failed to get product name for '$PRODUCT'."
        PRODUCT_FULL_NAME=`product_full_name $PRODUCT`
        exit_on_error $? "Failed to get product full name for '$PRODUCT'."
        PRODUCT_DESCRIPTION=`product_description $PRODUCT`
        exit_on_error $? "Failed to get product description for '$PRODUCT'."
        PRODUCT_PACKAGES=`product_packages $PRODUCT`
        exit_on_error $? "Failed to get package list for '$PRODUCT'."
        PRODUCT_VERSION="${MAIN_VERSION}"
        PRODUCT_FULL_RELEASE="${MAIN_RELEASE}.${SVN_REVISION}"
        PRODUCT_DIR="${BUILD_ROOT}/src/linux/build/products/${PRODUCT}/macpckgr"
        PRODUCT_DMG_TEMPLATE_DIR="${BUILD_ROOT}/src/linux/build/products/${PRODUCT}/macdmg"
        PRODUCT_DMG_TEMPLATE="${PRODUCT_DMG_TEMPLATE_DIR}/template.tar.bz2"

        if [ -n "${OFFICIAL_BUILD_NUMBER}" ] ; then
            PRODUCT_FULL_RELEASE="${PRODUCT_FULL_RELEASE}.${OFFICIAL_BUILD_NUMBER}"
            PRODUCT_FULL_VERSION="${MAIN_VERSION}.${OFFICIAL_BUILD_NUMBER}"
        else
            PRODUCT_FULL_VERSION="${MAIN_VERSION}.${PRODUCT_FULL_RELEASE}"
        fi

        PRODUCT_BUILD_DIR="${BUILD_META_OS_ROOT}/products/dmg/${PRODUCT_NAME}"
        PRODUCT_BUILD_DIR_FSROOT="${PRODUCT_BUILD_DIR}/root"
        PRODUCT_BUILD_DIR_PMAKER="${PRODUCT_BUILD_DIR}/pmaker"

        INFO_PLIST="${PRODUCT_BUILD_DIR_PMAKER}/Info.plist"
        DESC_PLIST="${PRODUCT_BUILD_DIR_PMAKER}/Resources/English.lproj/Description.plist"

        NAME_MPKG="${PRODUCT_NAME}-${PRODUCT_FULL_VERSION}-${ARCH_RENAME}.mpkg"
        OUT_MPKG="${PRODUCT_BUILD_DIR}/${NAME_MPKG}"
        OUT_DMG="${OUT_DIR}/${PRODUCT_NAME}-${PRODUCT_FULL_VERSION}-${ARCH_RENAME}.dmg"
        BUILD_DMG_TMP_DIR="${PRODUCT_BUILD_DIR}/dmg.tmp"

        # Recreate product build directory
        [ -d "${PRODUCT_BUILD_DIR}" ] && rm -rf "${PRODUCT_BUILD_DIR}"
        mkdir -p "${PRODUCT_BUILD_DIR_FSROOT}"
        mkdir -p "${PRODUCT_BUILD_DIR_PMAKER}"
        exit_on_error $?

        # Copy packages
        for PACKAGE in ${PRODUCT_PACKAGES} ; do
            rsync -a "${BUILD_DIST_OS_ROOT}/packages/${PACKAGE}/mac/likewise-${PACKAGE}-${PRODUCT_VERSION}.${PRODUCT_FULL_RELEASE}.${ARCH_RENAME}.pkg" "${PRODUCT_BUILD_DIR_FSROOT}/."
            exit_on_error $?
        done

        # Prepare package maker files
        rsync -a "${PRODUCT_DIR}/" "${PRODUCT_BUILD_DIR_PMAKER}/"
        exit_on_error $?

        for file in ${INFO_PLIST} ${DESC_PLIST} ; do
	    sed \
                -e "s|@LIKEWISE_VERSION@|${MAIN_VERSION}|g" \
                -e "s|@PRODUCT_FULL_NAME@|${PRODUCT_FULL_NAME}|g" \
                -e "s|@PRODUCT_DESCRIPTION@|${PRODUCT_DESCRIPTION}|g" \
	        < "${file}" \
	        > "${file}.out"
            mv "${file}.out" "${file}"
            exit_on_error $?
        done

        #echo "PackageMaker call args:"
        #echo "$PMAKER" " -build -v -p " "$OUT_MPKG" " -i " "$INFO_PLIST" " -r " "$PRODUCT_BUILD_DIR_PMAKER/Resources" " -d " "$DESC_PLIST" " -mi " "$PRODUCT_BUILD_DIR_FSROOT"

        "${PMAKER}" -build -v -p "${OUT_MPKG}" -i "${INFO_PLIST}" -r "${PRODUCT_BUILD_DIR_PMAKER}/Resources" -d "${DESC_PLIST}" -mi "${PRODUCT_BUILD_DIR_FSROOT}"
        if [ $? -ne 0 ]; then
            echo "Error calling PackageMaker (please check that you are using version 2.1.1)"
            echo "For Mac systems with OSX > 10.4, try adding /Developer/Applications/Utilities/PackageMaker-2.1.1/PackageMaker.app to your system to fix."
            exit $?
        fi

        echo "Template dir path: ${PRODUCT_DMG_TEMPLATE_DIR}"
        if [ -d "${PRODUCT_DMG_TEMPLATE_DIR}" ]; then
            echo "Building DMG from template ${PRODUCT_DMG_TEMPLATE}"
            # Detach any disk image left over from before.  Ignore errors.
            if [ -d "${BUILD_DMG_TMP_DIR}" ]; then
                echo "Remove leftover temporary files"
                rm -rf "${BUILD_DMG_TMP_DIR}"
            fi
            mkdir "${BUILD_DMG_TMP_DIR}"
            exit_on_error $?
            echo "Copy the template"
            tar -C "${BUILD_DMG_TMP_DIR}" -xjf "${PRODUCT_DMG_TEMPLATE}"
            exit_on_error $?
            echo "Copy the installer package"
            ditto "${OUT_MPKG}" "${BUILD_DMG_TMP_DIR}/Installer/${NAME_MPKG}"
            exit_on_error $?
            echo "Set read only"
            chmod -Rf go-w "${BUILD_DMG_TMP_DIR}"
            exit_on_error $?
            echo "Create the DMG"
            rm -f "${OUT_DMG}"
            hdiutil create -fs HFS+ -srcfolder "${BUILD_DMG_TMP_DIR}" \
                -format UDZO -imagekey zlib-level=9 \
                -volname "${PRODUCT_NAME}" -o "${OUT_DMG}"
            exit_on_error $?
            echo "Remove temporary files"
            rm -rf "${BUILD_DMG_TMP_DIR}"
        else
            hdiutil create -fs HFS+ -srcfolder "${OUT_MPKG}" "${OUT_DMG}"
            exit_on_error $?
        fi
    done

    return 0
}

main "$@"
exit $?
