/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPC2_H_RPCGEN
#define _RPC2_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


enum rpc2_auth_flavor {
	RPC2_AUTH_NONE = 0,
	RPC2_AUTH_SYS = 1,
};
typedef enum rpc2_auth_flavor rpc2_auth_flavor;

struct rpc2_opaque_auth {
	rpc2_auth_flavor flavor;
	struct {
		u_int body_len;
		char *body_val;
	} body;
};
typedef struct rpc2_opaque_auth rpc2_opaque_auth;

struct rpc2_authsys_parms {
	u_int stamp;
	char *machinename;
	u_int uid;
	u_int gid;
	struct {
		u_int gids_len;
		u_int *gids_val;
	} gids;
};
typedef struct rpc2_authsys_parms rpc2_authsys_parms;

enum rpc2_msg_type {
	RPC2_CALL = 0,
	RPC2_REPLY = 1,
};
typedef enum rpc2_msg_type rpc2_msg_type;

enum rpc2_reply_stat {
	RPC2_MSG_ACCEPTED = 0,
	RPC2_MSG_DENIED = 1,
};
typedef enum rpc2_reply_stat rpc2_reply_stat;

enum rpc2_accept_stat {
	RPC2_SUCCESS = 0,
	RPC2_PROG_UNAVAIL = 1,
	RPC2_PROG_MISMATCH = 2,
	RPC2_PROC_UNAVAIL = 3,
	RPC2_GARBAGE_ARGS = 4,
	RPC2_SYSTEM_ERR = 5,
};
typedef enum rpc2_accept_stat rpc2_accept_stat;

enum rpc2_reject_stat {
	RPC2_RPC_MISMATCH = 0,
	RPC2_AUTH_ERROR = 1,
};
typedef enum rpc2_reject_stat rpc2_reject_stat;

enum rpc2_auth_stat {
	RPC2_AUTH_OK = 0,
	RPC2_AUTH_BADCRED = 1,
	RPC2_AUTH_REJECTEDCRED = 2,
	RPC2_AUTH_BADVERF = 3,
	RPC2_AUTH_REJECTEDVERF = 4,
	RPC2_AUTH_TOOWEAK = 5,
	RPC2_AUTH_INVALIDRESP = 6,
	RPC2_AUTH_FAILED = 7,
};
typedef enum rpc2_auth_stat rpc2_auth_stat;

struct rpc2_call_body {
	u_int rpcvers;
	u_int prog;
	u_int vers;
	u_int proc;
	rpc2_opaque_auth cred;
	rpc2_opaque_auth verf;
};
typedef struct rpc2_call_body rpc2_call_body;

struct rpc2_mismatch_info {
	u_int low;
	u_int high;
};
typedef struct rpc2_mismatch_info rpc2_mismatch_info;

struct rpc2_accepted_reply_data {
	rpc2_accept_stat stat;
	union {
		char results[0];
		rpc2_mismatch_info mismatch_info;
	} rpc2_accepted_reply_data_u;
};
typedef struct rpc2_accepted_reply_data rpc2_accepted_reply_data;

struct rpc2_accepted_reply {
	rpc2_opaque_auth verf;
	rpc2_accepted_reply_data data;
};
typedef struct rpc2_accepted_reply rpc2_accepted_reply;

struct rpc2_rejected_reply {
	rpc2_reject_stat stat;
	union {
		rpc2_mismatch_info mismatch_info;
		rpc2_auth_stat stat;
	} rpc2_rejected_reply_u;
};
typedef struct rpc2_rejected_reply rpc2_rejected_reply;

struct rpc2_reply_body {
	rpc2_reply_stat stat;
	union {
		rpc2_accepted_reply areply;
		rpc2_rejected_reply rreply;
	} rpc2_reply_body_u;
};
typedef struct rpc2_reply_body rpc2_reply_body;

struct rpc2_rpc_msg_body {
	rpc2_msg_type mtype;
	union {
		rpc2_call_body cbody;
		rpc2_reply_body rbody;
	} rpc2_rpc_msg_body_u;
};
typedef struct rpc2_rpc_msg_body rpc2_rpc_msg_body;

struct rpc2_rpc_msg {
	u_int xid;
	rpc2_rpc_msg_body body;
};
typedef struct rpc2_rpc_msg rpc2_rpc_msg;

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_rpc2_auth_flavor (XDR *, rpc2_auth_flavor*);
extern  bool_t xdr_rpc2_opaque_auth (XDR *, rpc2_opaque_auth*);
extern  bool_t xdr_rpc2_authsys_parms (XDR *, rpc2_authsys_parms*);
extern  bool_t xdr_rpc2_msg_type (XDR *, rpc2_msg_type*);
extern  bool_t xdr_rpc2_reply_stat (XDR *, rpc2_reply_stat*);
extern  bool_t xdr_rpc2_accept_stat (XDR *, rpc2_accept_stat*);
extern  bool_t xdr_rpc2_reject_stat (XDR *, rpc2_reject_stat*);
extern  bool_t xdr_rpc2_auth_stat (XDR *, rpc2_auth_stat*);
extern  bool_t xdr_rpc2_call_body (XDR *, rpc2_call_body*);
extern  bool_t xdr_rpc2_mismatch_info (XDR *, rpc2_mismatch_info*);
extern  bool_t xdr_rpc2_accepted_reply_data (XDR *, rpc2_accepted_reply_data*);
extern  bool_t xdr_rpc2_accepted_reply (XDR *, rpc2_accepted_reply*);
extern  bool_t xdr_rpc2_rejected_reply (XDR *, rpc2_rejected_reply*);
extern  bool_t xdr_rpc2_reply_body (XDR *, rpc2_reply_body*);
extern  bool_t xdr_rpc2_rpc_msg_body (XDR *, rpc2_rpc_msg_body*);
extern  bool_t xdr_rpc2_rpc_msg (XDR *, rpc2_rpc_msg*);

#else /* K&R C */
extern bool_t xdr_rpc2_auth_flavor ();
extern bool_t xdr_rpc2_opaque_auth ();
extern bool_t xdr_rpc2_authsys_parms ();
extern bool_t xdr_rpc2_msg_type ();
extern bool_t xdr_rpc2_reply_stat ();
extern bool_t xdr_rpc2_accept_stat ();
extern bool_t xdr_rpc2_reject_stat ();
extern bool_t xdr_rpc2_auth_stat ();
extern bool_t xdr_rpc2_call_body ();
extern bool_t xdr_rpc2_mismatch_info ();
extern bool_t xdr_rpc2_accepted_reply_data ();
extern bool_t xdr_rpc2_accepted_reply ();
extern bool_t xdr_rpc2_rejected_reply ();
extern bool_t xdr_rpc2_reply_body ();
extern bool_t xdr_rpc2_rpc_msg_body ();
extern bool_t xdr_rpc2_rpc_msg ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RPC2_H_RPCGEN */
